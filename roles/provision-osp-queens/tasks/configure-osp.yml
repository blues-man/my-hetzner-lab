---
- name: Update nova.conf
  blockinfile:
    dest: /etc/nova/nova.conf
    backup: yes
    insertafter: '\[libvirt\]'
    block: |
      images_type = lvm 
      volume_clear = none
      images_volume_group = cinder-volumes
  notify:
    - restart openstack-nova-compute
    - restart openstack-nova-api
    - restart openstack-nova-scheduler

- name: Update cinder.conf
  lineinfile:
    path: /etc/cinder/cinder.conf
    insertafter: '^enabled_backends=lvm'
    line: 'volume_clear = none'
    backup: yes
  notify:
    - restart openstack-cinder-volume
    - restart openstack-cinder-api


- name: Ceilometer initialize database
  command: aodh-dbsync

- set_facts:
    openstack_auth:
        auth_url: "{{ openstack_auth_url }}"
        username: "{{ openstack_user }}"
        password: "{{ openstack_admin_password }}"
        project_name: "{{ openstack_project }}"
        user_domain_name: "Default"
        project_domain_name: "Default" 


- name: "Neutron: set dns_domain"
  lineinfile:
    path: /etc/neutron/neutron.conf
    regexp: 'dns_domain = '
    line: "dns_domain = {{ openstack_dns_domain }}"
    backup: yes
  notify:
    - restart neutron-dhcp-agent

- name: "Neutron: set extension_drivers"
  lineinfile:
    path: /etc/neutron/plugins/ml2/ml2_conf.ini
    regexp: '^extension_drivers=port_security,qos'
    line: "extension_drivers=port_security,qos,dns"
    backup: yes
  notify:
    - restart neutron-dhcp-agent

- name: Setup forward DNS Server
  lineinfile:
    path: /etc/neutron/dhcp_agent.ini
    regexp: 'dnsmasq_dns_servers ='
    line: "dnsmasq_dns_servers = {{ openstack_forward_dns }}"
    backup: yes
  notify:
    - restart neutron-dhcp-agent  


- name: Enable forward DNS Server
  lineinfile:
    path: /etc/neutron/dhcp_agent.ini
    regexp: 'dnsmasq_local_resolv ='
    line: "dnsmasq_local_resolv = true"
    backup: yes
  notify:
    - restart neutron-dhcp-agent  


# https://docs.ansible.com/ansible/latest/modules/list_of_cloud_modules.html#openstack

- name: Set fact openstack auth
  set_fact:
    os_auth: { auth_url: "{{ openstack_auth_url }}" ,username: "{{ openstack_user }}" ,password: "{{ openstack_admin_password }}" ,project_name: "{{ openstack_project }}" ,user_domain_name: "Default" ,project_domain_name: "Default" }

# Create an externally accessible network named 'ext_network'.
- name: Create private network
  connection: local
  os_network:
    auth: "{{ os_auth }}"
    state: present
    name: private

- name: Create private subnet
  connection: local
  os_subnet:
    auth: "{{ os_auth }}"
    state: present
    network_name: private
    name: private_subnet
    cidr: 10.10.1.0/24
    allocation_pool_start: 10.10.1.100
    allocation_pool_end: 10.10.1.200
    dns_nameservers:
       - 10.10.1.100


- name: Create public network
  connection: local
  os_network:
    auth: "{{ os_auth }}"
    state: present
    name: public
    external: True
    provider_network_type: flat
    provider_physical_network: extnet2

- name: Create public subnet
  connection: local
  os_subnet:
    auth: "{{ os_auth }}"
    state: present
    network_name: public
    name: public_subnet
    enable_dhcp: False
    cidr: "{{ hetzner_subnet }}"
    allocation_pool_start: "{{ hetzner_subnet_allocation_start }}"
    allocation_pool_end: "{{ hetzner_subnet_allocation_end }}"

- name: Create router
  connection: local
  os_router:
    auth: "{{ os_auth }}"    
    state: present
    name: router1
    network: public
    interfaces:
      - net: private
        subnet: private_subnet